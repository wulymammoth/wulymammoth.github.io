<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on wulymammoth</title>
        <link>https://wulymammoth.github.io/posts/</link>
        <description>Recent content in Posts on wulymammoth</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 23 May 2020 09:44:59 -0700</lastBuildDate>
        <atom:link href="https://wulymammoth.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Violating the Law of Demeter</title>
            <link>https://wulymammoth.github.io/posts/law-of-demeter/</link>
            <pubDate>Sat, 23 May 2020 09:44:59 -0700</pubDate>
            
            <guid>https://wulymammoth.github.io/posts/law-of-demeter/</guid>
            <description>A co-worker linked to the following article describing some of JavaScript&amp;rsquo;s new features in 2020 this past week: https://www.freecodecamp.org/news/javascript-new-features-es2020/. One of the features that stood out was optional chaining.
This brings with it something that I&amp;rsquo;ve already seen in other languages that I work with, namely Ruby, and its #try or &amp;amp;. (safe navigation operator). This sort of convenience feature is a double-edged sword:
 good for scripting not so good for any software that is to be extended and or maintained  1.</description>
            <content type="html"><![CDATA[<p>A co-worker linked to the following article describing some of JavaScript&rsquo;s new features in 2020 this past week: <a href="https://www.freecodecamp.org/news/javascript-new-features-es2020/">https://www.freecodecamp.org/news/javascript-new-features-es2020/</a>. One of the features that stood out was <strong>optional chaining</strong>.</p>
<p>This brings with it something that I&rsquo;ve already seen in other languages that I work with, namely Ruby, and its <code>#try</code> or <code>&amp;.</code> (safe navigation operator). This sort of convenience feature is a double-edged sword:</p>
<ol>
<li>good for scripting</li>
<li>not so good for any software that is to be extended and or maintained</li>
</ol>
<h2 id="1-_why-is-it-good-for-scripting_">1. <em>why is it good for scripting?</em></h2>
<p>Instead of the verbosity below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">foo</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">foo</span>.<span style="color:#a6e22e">bar</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">foo</span>.<span style="color:#a6e22e">bar</span>.<span style="color:#a6e22e">baz</span>) <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">foo</span>.<span style="color:#a6e22e">bar</span>.<span style="color:#a6e22e">baz</span>);

<span style="color:#75715e">// -OR- ü§Æ
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">foo</span>) {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">foo</span>.<span style="color:#a6e22e">bar</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">foo</span>.<span style="color:#a6e22e">bar</span>.<span style="color:#a6e22e">baz</span>) {
      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">foo</span>.<span style="color:#a6e22e">bar</span>.<span style="color:#a6e22e">baz</span>);
    }
  }
}
</code></pre></div><p>We have this. Concise ain&rsquo;t it?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">foo</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">bar</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">baz</span><span style="color:#f92672">?</span>);
</code></pre></div><p>Scripts are typically one-offs and/or throw-away code that likely won&rsquo;t be used again once time moves forward. It isn&rsquo;t always the case, of course. Sometimes we just have to do things that are quick and dirty in scenarios where we are scripting and don&rsquo;t own the content and/or data that we are traversing. Because we aren&rsquo;t the owners, the schema/shape of the data/objects that we want to navigate are opaque to us, therefore subjecting us to defensive programming practices to ensure that we don&rsquo;t have runtime exceptions that halt our script.</p>
<p>That said, the terseness of the new feature makes our script much more readable and removes possible blocks of indentation from conditional logic.</p>
<h2 id="2-_why-isnt-it-so-good-for-any-real-software_">2. <em>why isn&rsquo;t it so good for any real software?</em></h2>
<p><strong>The TL;DR : maintenance or feature extension nightmares from tight-coupling and implicit dependencies</strong></p>
<p>In almost all organizations that I&rsquo;ve been at, the following conversation almost always comes up (back-pressure from the devs on the team):</p>
<blockquote>
<p><em>In order for us to build this feature, we need a sprint to refactor our code, because we weren&rsquo;t aware of this use case</em></p>
</blockquote>
<p>Sometimes we even put the blame on the business and/or product team for NOT having envisioned this in the first place. This is a really poor mindset to have, because at the end of the day &ndash; <strong><em>the only constant in software is change</em></strong>. Some of us may be able to get away with this being a contractor with a single deliverable and pawning off any extension or maintenance to the hapless downstream dev that gets asked to extend it with new features.</p>
<p>This saddens me, because we&rsquo;ve made assumptions about our software that make it too rigid for extension without inducing a refactor and sometimes (hopefully not) a complete re-write.</p>
<p>We should strive to write software that&rsquo;s amenable to change, but this also <em>DOES NOT</em> mean that we try to support every possible use case that we can think of, just flexible enough to not lock us in.</p>
<p>Without digressing too far, let&rsquo;s get back to why something that seems to be a welcome, and maybe even a very nice, addition to the language may get us into trouble&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UsaAddress</span> {
  <span style="color:#a6e22e">constructor</span>(<span style="color:#a6e22e">street</span>, <span style="color:#a6e22e">state</span>) {
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">street</span>  <span style="color:#f92672">=</span> <span style="color:#a6e22e">street</span>;
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span>   <span style="color:#f92672">=</span> <span style="color:#a6e22e">state</span>;
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">country</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;United States of America&#34;</span>;
  }
}

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span> {
  <span style="color:#a6e22e">constructor</span>(<span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">address</span>) {
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span>    <span style="color:#f92672">=</span> <span style="color:#a6e22e">name</span>;
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">address</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">address</span>;
  }
}

<span style="color:#75715e">/*
</span><span style="color:#75715e">Is the following better? üßê
</span><span style="color:#75715e">
</span><span style="color:#75715e">BEFORE:
</span><span style="color:#75715e">person &amp;&amp; person.address &amp;&amp; person.address.street
</span><span style="color:#75715e">person &amp;&amp; person.address &amp;&amp; person.address.state
</span><span style="color:#75715e">*/</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">printAddress</span>(<span style="color:#a6e22e">person</span>) {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>([
    <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">street</span><span style="color:#f92672">?</span>, <span style="color:#75715e">// üëà nicer syntax
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">state</span><span style="color:#f92672">?</span>, <span style="color:#75715e">// üëà with new optional chaining
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span>.<span style="color:#a6e22e">country</span>
  ].<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#39;\n&#39;</span>));
}

<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">address</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">UsaAddress</span>(<span style="color:#e6db74">&#39;123 Foo St.&#39;</span>, <span style="color:#e6db74">&#39;New York&#39;</span>);
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">andrea</span>  <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Person</span>(<span style="color:#e6db74">&#39;Andrea&#39;</span>, <span style="color:#a6e22e">address</span>),
<span style="color:#a6e22e">printAddress</span>(<span style="color:#a6e22e">andrea</span>);
</code></pre></div><p>What&rsquo;s wrong here?</p>
<p>Our <code>printAddress</code> function assumes several things about a person:</p>
<ol>
<li>that the person has an address property</li>
<li>that the address has a state property</li>
</ol>
<p>So what?</p>
<blockquote>
<p><em>Hey team! We&rsquo;ve got new business!!! We&rsquo;re going to be supporting Canadian addresses!</em></p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CanadaAddress</span> {
  <span style="color:#a6e22e">constructor</span>(<span style="color:#a6e22e">street</span>, <span style="color:#a6e22e">province</span>, <span style="color:#a6e22e">country</span>) {
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">street</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">street</span>;
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">province</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">province</span>; <span style="color:#75715e">// üëà difference
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">country</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Canada&#34;</span>;
  }
}
</code></pre></div><p>What most of us do to support this new use case</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">printAddress</span>(<span style="color:#a6e22e">person</span>) {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>([
    <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">street</span><span style="color:#f92672">?</span>,
    <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">state</span><span style="color:#f92672">?</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">province</span><span style="color:#f92672">?</span>, <span style="color:#75715e">// ‚ö†Ô∏è
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span>.<span style="color:#a6e22e">country</span>
  ].<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#39;\n&#39;</span>));
}

<span style="color:#75715e">// - OR - ü§Æ
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">printAddress</span>(<span style="color:#a6e22e">person</span>) {
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span>.<span style="color:#a6e22e">constructor</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;UsaAddress&#34;</span>) {
    <span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span>.<span style="color:#a6e22e">state</span>;
  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span>.<span style="color:#a6e22e">constructor</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;CanadianAddress&#34;</span>) {
    <span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span>.<span style="color:#a6e22e">province</span>;
  } <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
  }

  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>([
    <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">street</span><span style="color:#f92672">?</span>,
    <span style="color:#a6e22e">state</span>,
    <span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span>.<span style="color:#a6e22e">country</span>
  ].<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#39;\n&#39;</span>));
}
</code></pre></div><p>Guess what happens when we need to support another type of address&hellip;</p>
<blockquote>
<p><em>Easy!! Just add another condition!</em></p>
</blockquote>
<p>Unfortunately, the above is <em>NOT</em> the right answer if we want to maintain extensibility and avoid the possibility of introducing a regression when mangling with existing code.</p>
<p>The <code>printAddress</code> function has dependencies that aren&rsquo;t passed into it:</p>
<ol>
<li>address</li>
<li>the state OR province on an address</li>
</ol>
<p>This function knows about something that is <strong>two degrees of separation</strong> away from itself, and if it changes, which the introduction of Canadian addresses introduces, our <code>printAddress</code> must change, too. This is tight-coupling &ndash; this function must move in lock-step with any address changes. It&rsquo;s rigid. It likely also requires updates to unit tests if there were any to begin with.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">         <span style="color:#960050;background-color:#1e0010">üëá</span> <span style="color:#75715e">// one degree of separation
</span><span style="color:#75715e"></span><span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">state</span><span style="color:#f92672">?</span>
                  <span style="color:#960050;background-color:#1e0010">üëÜ</span> <span style="color:#75715e">// two degrees of separation
</span></code></pre></div><p><strong>NOTE</strong></p>
<ul>
<li>The only thing passed in as an argument to our function is a <strong>person</strong> object</li>
<li>This implies that our function <strong>depends</strong> on having a person for it to operate</li>
<li>BUT it implicitly also says that the person must have an address and its address must have a state or province</li>
</ul>
<hr>
<p>How do we fix this? Follow the <strong>Law of Demeter</strong> which simply states:</p>
<blockquote>
<p><strong><em>Each unit should have only limited knowledge about other units: only units &ldquo;closely&rdquo; related to the current unit.</em></strong></p>
</blockquote>
<blockquote>
<p><strong><em>Each unit should only talk to its friends; don&rsquo;t talk to strangers.</em></strong></p>
</blockquote>
<blockquote>
<p><strong><em>Only talk to your immediate friends.</em></strong></p>
</blockquote>
<p>With the above guidelines, we can interpret it to say, <em>&ldquo;a function should only know about things that are about a degree of separation away&rdquo;</em>.</p>
<p>Ideally, we only go as far as this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">person</span>.<span style="color:#a6e22e">address</span>);
</code></pre></div><p>When we spot <strong>chaining</strong> that goes beyond a degree of separation away from injected dependencies (e.g., <code>person</code>), red flags <em>should</em> be raised.</p>
<p>We&rsquo;ll talk about how to fix this in a follow up post.</p>
<hr>
<h2 id="additional-thoughts">additional thoughts</h2>
<p>I don&rsquo;t really see a much of difference between software developers with years of experience and ones that are new. Some of us are lucky enough to learn it from the job having good mentors, but many of us don&rsquo;t. A genuine curiosity and simply just caring as led me to find solutions to these problems without re-inventing the wheel.</p>
<p>I implore anyone that truly cares about writing maintainable software to check out <a href="https://youtu.be/oytL881p-nQ">&ldquo;Simple Made Easy&rdquo;</a> by Rich Hickey, author of the Clojure programming language and truly understanding what the principles that make up the acronym that <a href="https://en.wikipedia.org/wiki/SOLID"><strong>SOLID</strong></a> embodies.</p>
]]></content>
        </item>
        
        <item>
            <title>My First Post</title>
            <link>https://wulymammoth.github.io/posts/my-first-post/</link>
            <pubDate>Sat, 23 May 2020 09:14:51 -0700</pubDate>
            
            <guid>https://wulymammoth.github.io/posts/my-first-post/</guid>
            <description>Bringing back my blog, particularly for technical musings, but also as a semi-infrequently updated journal
$ cat friends.txt | awk &amp;#39;{ print &amp;#34;üëã &amp;#34; %1 &amp;#34;!&amp;#34; }&amp;#39; </description>
            <content type="html"><![CDATA[<p>Bringing back my blog, particularly for technical musings, but also as a semi-infrequently updated journal</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat friends.txt | awk <span style="color:#e6db74">&#39;{ print &#34;üëã &#34; %1 &#34;!&#34; }&#39;</span>
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
